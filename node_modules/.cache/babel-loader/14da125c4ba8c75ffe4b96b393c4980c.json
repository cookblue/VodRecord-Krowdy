{"remainingRequest":"/home/caro/Downloads/vodrecord-krowdy/node_modules/babel-loader/lib/index.js!/home/caro/Downloads/vodrecord-krowdy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/caro/Downloads/vodrecord-krowdy/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/caro/Downloads/vodrecord-krowdy/src/components/WebCam.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/caro/Downloads/vodrecord-krowdy/src/components/WebCam.vue","mtime":1566178064189},{"path":"/home/caro/Downloads/vodrecord-krowdy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/caro/Downloads/vodrecord-krowdy/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/caro/Downloads/vodrecord-krowdy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/caro/Downloads/vodrecord-krowdy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/caro/Downloads/vodrecord-krowdy/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar mediaRecorder; // exporto componente para usarlo en otros componentes\n\nexport default {\n  name: 'WebCam',\n  props: {\n    title: String\n  },\n  data: function data() {\n    return {\n      nombre: 'nombre'\n    };\n  },\n  methods: {\n    // Comenzar a grabar\n    // async: await solo funciona cuando el metodo es asincrono\n    // async signficia que tu metodo va a tener una f.asincrona(no se sabe cuando va a terminar)\n    startRecord: function () {\n      var _startRecord = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _stream;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('Se empezo a grabar!!');\n                _context.prev = 1;\n                _context.next = 4;\n                return navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  // { echoCancellation: { exact: false } }, \n                  video: true\n                });\n\n              case 4:\n                _stream = _context.sent;\n                console.log(_stream);\n                this.handleSuccess(_stream);\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n\n      function startRecord() {\n        return _startRecord.apply(this, arguments);\n      }\n\n      return startRecord;\n    }(),\n    //Metodo para detener grabacion\n    stopRecord: function stopRecord() {\n      console.log('El video se detiene');\n      mediaRecorder.stop();\n      stream.getTracks()[0].stop();\n      stream.getTracks()[1].stop();\n      this.$emit('onstop', 'end');\n    },\n    // Grabacion\n    handleSuccess: function handleSuccess(stream) {\n      // con window hacemos una variable global\n      window.stream = stream;\n      mediaRecorder = new MediaRecorder(stream);\n\n      player.onloadedmetadata = function (ev) {\n        player.play();\n      };\n\n      player.srcObject = stream;\n      mediaRecorder.start();\n      var recordedChunks = [];\n\n      mediaRecorder.ondataavailable = function (ev) {\n        console.log('Capturar', ev.data);\n        recordedChunks.push(ev.data);\n      };\n\n      mediaRecorder.onstop = function (ev) {\n        //blob donde almaceno el video\n        console.log('on stop1');\n        var blob = new Blob(recordedChunks, {\n          'type': 'video/webm;'\n        });\n        recordedChunks = [];\n        var videoURL = window.URL.createObjectURL(blob);\n        player.src = videoURL; //Implementacion para enviar al servidor\n\n        var fd = new FormData();\n        console.log('onstop2');\n        fd.append('video', blob, 'blobby.webm');\n        console.log('Haciendo peticion');\n        fetch('http://localhost:8080/upload', {\n          method: 'post',\n          body: fd\n        });\n        var a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = videoURL;\n        a.download = 'test.webm';\n        document.body.appendChild(a); // a.click();\n\n        setTimeout(function () {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(videoURL);\n        }, 5000);\n      };\n    }\n  },\n  mounted: function mounted() {\n    var downloadLink = document.getElementById('download');\n  }\n};",{"version":3,"sources":["WebCam.vue"],"names":[],"mappings":"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","sourcesContent":["<!--template es la estructura de archivos de .vue -->\n<template>\n  <div>\n    <!--prop de preguntas-->\n    <h1>{{title}}</h1> \n\n    <!--playsinline:quitar los controles de reproduccion del video ,muted:silenciar el sonido del video que se esta grabando-->\n    <video id=\"player\" playsinline muted></video>\n    <!--es un metodo-->\n    <button id=\"startRecord\" @click=\"startRecord\">Empieza a Grabar</button>\n    <button id=\"stopRecord\" @click=\"stopRecord\">Detener Grabacion</button>\n  </div>\n</template>\n\n<script>\n\nlet mediaRecorder;\n// exporto componente para usarlo en otros componentes\nexport default {\n  name: 'WebCam',\n  \n  props: {\n    title: String,\n  },\n\n  data: () => {\n    return {\n      nombre: 'nombre'\n    }\n  },\n  \n  methods: {\n    // Comenzar a grabar\n    // async: await solo funciona cuando el metodo es asincrono\n    // async signficia que tu metodo va a tener una f.asincrona(no se sabe cuando va a terminar)\n    async startRecord() {\n      console.log('Se empezo a grabar!!');\n      try {\n        // stream: Flujo de datos\n        // await va a esperar que acepte o rechace los permisos\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true, // { echoCancellation: { exact: false } }, \n          video: true \n        });\n        console.log(stream);\n        this.handleSuccess(stream);\n      } catch (e) {\n        console.log(e);\n      }\n    },\n\n    //Metodo para detener grabacion\n    stopRecord() {\n      console.log('El video se detiene');\n      mediaRecorder.stop();\n      stream.getTracks()[0].stop();\n      stream.getTracks()[1].stop();\n\n      this.$emit('onstop', 'end');\n    },\n\n    // Grabacion\n    handleSuccess(stream) {\n      // con window hacemos una variable global\n      window.stream = stream;\n      mediaRecorder = new MediaRecorder(stream);\n\n      player.onloadedmetadata = (ev) => {\n        player.play();\n      };\n      \n      player.srcObject = stream;\n\n      mediaRecorder.start();\n    \n      let recordedChunks = [];\n      \n      mediaRecorder.ondataavailable = (ev) => {\n        console.log('Capturar', ev.data);\n        recordedChunks.push(ev.data);\n      };      \n      \n      mediaRecorder.onstop = (ev) => {\n        //blob donde almaceno el video\n        console.log('on stop1');\n        let blob = new Blob(recordedChunks, { 'type' : 'video/webm;' });\n        recordedChunks = [];\n        let videoURL = window.URL.createObjectURL(blob);\n        player.src = videoURL;\n        \n        //Implementacion para enviar al servidor\n        const fd = new FormData();\n        console.log('onstop2');\n        fd.append('video', blob, 'blobby.webm');\n        console.log('Haciendo peticion');\n        fetch('http://localhost:8080/upload',\n        {\n            method: 'post',\n            body: fd\n        }); \n\n\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = videoURL;\n        a.download = 'test.webm';\n        document.body.appendChild(a);\n        // a.click();\n        \n        setTimeout(() => {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(videoURL);\n        }, 5000);\n      }\n    }\n  },\n  mounted() {\n    const downloadLink = document.getElementById('download');\n  }\n};\n</script>\n\n"],"sourceRoot":"src/components"}]}